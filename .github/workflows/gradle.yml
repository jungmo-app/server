# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy To EC2

on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17


      - name: application.yml 파일 만들기
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          find src

      - name: application-prod.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml
          find src

      - name: application-aws.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_AWS_YML }}" | base64 --decode > src/main/resources/application-aws.yml
          find src

      - name: application-jwt.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_JWT_YML }}" | base64 --decode > src/main/resources/application-jwt.yml
          find src

      - name: application-oauth.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_OAUTH_YML }}" | base64 --decode > src/main/resources/application-oauth.yml
          find src

      - name: application-smtp.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_SMTP_YML }}" | base64 --decode > src/main/resources/application-smtp.yml
          find src


      


      - name: gradlew에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: DockerHub 에 로그인하기
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin


      - name: Docker 이미지 생성
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/jungmo:latest .


      - name: Docker 이미지 Push하기
        run: docker push ${{ secrets.DOCKER_USERNAME }}/jungmo:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker compose -f /home/compose/docker-compose.yml down
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/jungmo:latest
            docker compose -f /home/compose/docker-compose.yml up -d
